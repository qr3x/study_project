""" Лабораторная работа №1 (весна) - ступень 3
РЕШЕНИЕ ЗАДАЧИ ДИРИХЛЕ ДЛЯ УРАВНЕНИЯ ПУАССОНА
(итерационный метод и его реализация в нестандартной области)

{  Δu(x, y) = –f*(x, y)     , при (x, y)∈G, G⊂[a, b]⊗[c, d]
{  u(x, y) = μ*(x, y)       , при (x, y)∈dG

Вариант задания:
  №  |  a, b, c, d   |      u*(x, y)        |
---------------------------------------------
  3  | -1, 1, -1, 1  |  exp(1 - x^2 - y^2)  |

Метод:
Метод минимальных невязок (ММН)

Область:
┌------┐
| ┌-┐ ┌┘
| | | |
| └-┘ └┐
└------┘

"""


import os
from decimal import Decimal, getcontext
import numpy as np
from scipy.sparse.linalg import gmres

from prettytable import PrettyTable


# Чистим экран (консоль) для разных ОС
def _cls() -> None:
    os.system('cls' if os.name == 'nt' else 'clear')


def get_str_area(width, height, x1, x2, x3, y1, y2):
    """ Рисуем область для вывода
    :param width: Ширина области
    :param height: Высота области
    :param x1: 1-ая линия для x
    :param x2: 2-ая линия для x
    :param x3: 3-ья линия для x
    :param y1: 1-ая линия для y
    :param y2: 2-ая линия для y
    :return: str с областью вида:
    ┌------┐
    | ┌-┐ ┌┘
    | | | |
    | └-┘ └┐
    └------┘
    """

    result = ''
    result += f'         {width}\n' \
              f'┌-----------------┐\n' \
              f'↓                 ↓\n' \
              f'┌-----------------┐ ←----------------------┐\n' \
              f'|  ┌----┐     ┌---┘ ←┐                     |\n' \
              f'|  |    |     |      |                     |\n' \
              f'|  |    |     |      | {y2 - y1} {" " * (19 - len(str(y2 - y1)))}| {height}\n' \
              f'|  |    |     |      |                     |\n' \
              f'|  └----┘     └---┐ ←┘                     |\n' \
              f'└-----------------┘ ←----------------------┘\n' \
              f'   ↑    ↑      ↑  ↑\n' \
              f'   |    |      └--┘\n' \
              f'   └----┘      {b - x3}\n' \
              f'   {x2 - x1}          '

    return result


def f(x, y):
    """

    :param x:
    :param y:
    :return:
    """
    pass


def nu():
    """ Получение граничного значения

    :return:
    """


def mmn(A: np.array, b: np.array, eps: float) -> np.array:
    """ Вычисление ММН (методом минимальных невязок)

    """
    pass


def main_task():
    """ Решение основной задачи

    """

    s = 0  # Кол-во итераций
    R = np.zeros((n + 1, m + 1), dtype=float)  # Невязка. Массив размером (n+1)x(m+1), заполненный нулями
    V = np.zeros((n + 1, m + 1), dtype=float)  # Матрица сетки. Массив размером (n+1)x(m+1), заполненный нулями
    # tmp_x = np.zeros(length, dtype=float)  # Первое приближение. Массив размером n
    eps_max = .0  # Общий eps
    eps_cur = .0  # Текущий eps
    h2 = 1 / h ** 2  # 1/ h^2
    k2 = 1 / k ** 2  # 1/ k^2
    A = -2 * (h2 + k2)
    v_old = .0
    v_new = .0

    # Заполнение граничных условий




def test_task():
    """ Решение тестовой задачи

    """
    pass


def main():
    """

    :return:
    """

    main_task()


if __name__ == '__main__':
    getcontext().prec = 16  # Кол-во знаков после запятой

    _cls()
    a, b, c, d = -1, 1, -1, 1

    """ ----------------------------------------------Ввод параметров----------------------------------------------"""

    n = 6
    m = 6
    e_met = 0.1
    N_max = 10000

    # x1 = -0.8
    # x2 = 0
    # x3 = .7
    # y1 = -0.8
    # y2 = 0.8

    # while True:
    #     try:
    #         print('n должно быть >= 6')
    #         n = int(input('Введите число разбиений по x, n='))
    #         if n <= 6:
    #             _cls()
    #             print('Нужно ввести целое положительное число, которое >= 6. Попробуйте снова')
    #             continue
    #         break
    #     except ValueError:
    #         _cls()
    #         print('Вы ввели не число. Попробуйте снова')
    # _cls()
    #
    # while True:
    #     try:
    #         print('m должно быть >= 5')
    #         m = int(input('Введите число разбиений по y, m='))
    #         if m <= 5:
    #             _cls()
    #             print('Нужно ввести целое положительное число, которое >= 5. Попробуйте снова')
    #             continue
    #         break
    #     except ValueError:
    #         _cls()
    #         print('Вы ввели не число. Попробуйте снова')
    # _cls()
    #
    # while True:
    #     try:
    #         e_met = float(input('Введите критерий выхода по точности, εмет='))
    #         if e_met <= 0:
    #             _cls()
    #             print('Нужно ввести положительное число. Попробуйте снова')
    #             continue
    #         break
    #     except ValueError:
    #         _cls()
    #         print('Вы ввели не число. Попробуйте снова')
    # _cls()
    #
    # while True:
    #     try:
    #         N_max = int(input('Введите критерий выхода по числу итераций, Nmax='))
    #         if N_max <= 0:
    #             _cls()
    #             print('Нужно ввести положительное число. Попробуйте снова')
    #             continue
    #         break
    #     except ValueError:
    #         _cls()
    #         print('Вы ввели не число. Попробуйте снова')
    # _cls()
    #
    # while True:
    #     try:
    #         x1 = float(input('Введите левую координату по x для внутреннего прямоугольника, x='))
    #         if x1 <= a or x1 >= b:
    #             _cls()
    #             print(f'x должно быть в диапазоне области: ({a}, {b}). Попробуйте снова')
    #             continue
    #         break
    #     except ValueError:
    #         _cls()
    #         print('Вы ввели не число. Попробуйте снова')
    #
    # while True:
    #     try:
    #         x2 = float(input('Введите правую координату по x для внутреннего прямоугольника, x='))
    #         if x2 <= x1 or x2 >= b:
    #             _cls()
    #             print(f'x должно быть в диапазоне области: ({x1}, {b}). Попробуйте снова')
    #             continue
    #         break
    #     except ValueError:
    #         _cls()
    #         print('Вы ввели не число. Попробуйте снова')
    # _cls()
    #
    # while True:
    #     try:
    #         x3 = float(input('Введите левую координату по x для вырезанного прямоугольника, x='))
    #         if x3 <= x2 or x3 >= b:
    #             _cls()
    #             print(f'x должно быть в диапазоне области: ({x2}, {b}). Попробуйте снова')
    #             continue
    #         break
    #     except ValueError:
    #         _cls()
    #         print('Вы ввели не число. Попробуйте снова')
    # _cls()
    #
    # while True:
    #     try:
    #         y1 = float(input('Введите нижнюю координату по y для вырезанного прямоугольника, y='))
    #         if y1 <= c or y1 >= d:
    #             _cls()
    #             print(f'y должно быть в диапазоне области: ({c}, {d}). Попробуйте снова')
    #             continue
    #         break
    #     except ValueError:
    #         _cls()
    #         print('Вы ввели не число. Попробуйте снова')
    # _cls()
    #
    # while True:
    #     try:
    #         y2 = float(input('Введите верхнюю координату по y для вырезанного прямоугольника, y='))
    #         if y2 <= y1 or y2 >= d:
    #             _cls()
    #             print(f'y должно быть в диапазоне области: ({y1}, {d}). Попробуйте снова')
    #             continue
    #         break
    #     except ValueError:
    #         _cls()
    #         print('Вы ввели не число. Попробуйте снова')
    # _cls()

    """ ----------------------------------------------/Ввод параметров----------------------------------------------"""

    h = round(float(b - a) / n, 16)
    k = round(float(d - c) / m, 16)
    e_met = round(float(e_met), 16)
    # x1 = round(float(x1), 16)
    # x2 = round(float(x2), 16)
    # x3 = round(float(x3), 16)
    # y1 = round(float(y1), 16)
    # y2 = round(float(y2), 16)

    """ -----------------------------------------Вывод начальной информации-----------------------------------------"""

    table = PrettyTable()
    table.field_names = ['№', 'a, b, c, d', 'u*(x, y)']
    table.add_row(['3', '-1, 1, -1, 1', 'exp(1 - x^2 - y^2)'])
    print('Вариант задания:')
    print(table)

    # f'{get_str_area(b - a, d - c, x1, x2, x3, y1, y2)}\n' \
    content = f'\nНачальные условия и параметры:\n' \
              f'Метод:\n' \
              f'Метод минимальных невязок (ММН)\n' \
              f'\n' \
              f'Область:\n' \
              f'\n' \
              f'a; b; c; d = {a}; {b}; {c}; {d}\n' \
              f'Число разбиений по x, n = {n}; Шаг по x, h = {h}\n' \
              f'Число разбиений по y, m = {m}; Шаг по y, k = {k}\n' \
              f'Критерий выхода по точности, εмет = {e_met}\n' \
              f'Критерий выхода по числу итераций, Nmax = {N_max}'
    print(content)

    """ ----------------------------------------/Вывод начальной информации----------------------------------------"""

    main()
